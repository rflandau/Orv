package orv // import "network-bois-orv/pkg/orv"

The Orv package provides utilities for constructing and querying Orv Vaults:
self-organizing, decentralized, service discovery trees. The meat of the package
is the prototype VaultKeeper, which can be utilized via orv.NewVaultKeeper().
Call the static subroutines (ex: List()) to make requests of an existing vault.

CONSTANTS

const (
	EXPECTED_STATUS_HELLO             int = http.StatusOK
	EXPECTED_STATUS_STATUS            int = http.StatusOK
	EXPECTED_STATUS_JOIN              int = http.StatusAccepted
	EXPECTED_STATUS_REGISTER          int = http.StatusAccepted
	EXPECTED_STATUS_VK_HEARTBEAT      int = http.StatusOK
	EXPECTED_STATUS_SERVICE_HEARTBEAT int = http.StatusOK
	EXPECTED_STATUS_LIST              int = http.StatusOK
	EXPECTED_STATUS_GET               int = http.StatusOK
)
    the HTTP codes to expect from a "good" response from each endpoint.

const (
	DEFAULT_PRUNE_TIME_PENDING_HELLO     time.Duration = time.Second * 5
	DEFAULT_PRUNE_TIME_SERVICELESS_CHILD time.Duration = time.Second * 5
	DEFAULT_PRUNE_TIME_CVK               time.Duration = time.Second * 5
)
    Default durations for the prune timers to fire. Records are not guaranteed
    be pruned at exactly this time, but its survival cannot be guaranteed after
    this point.

const (
	_API_NAME    string = "Orv"   // the API is for ORV
	_API_VERSION string = "1.0.1" // the Orv version being served
)
const CONTENT_TYPE string = "application/problem+json"
    the content type of responses from the VK

const DEFAULT_PARENT_HEARTBEAT_FREQ time.Duration = 500 * time.Millisecond
    Default frequency at which a VK sends heartbeats to its parent.

const hdrPkt_t string = "Pkt-Type"

FUNCTIONS

func ErrBadAddr(ap netip.AddrPort) error
    invalid addrport

func ErrBadStaleTime() error
    invalid stale time

func ErrDead() error
    this VK has been terminated.

func ErrEmptyServiceName(sn serviceName) error
    given service name is empty

func ErrUnknownCID(cID childID) error
    given cID does not correspond to a known child

func HErrBadAddr(addr_s string, pkt_t PacketType) error
    Failed to parse a valid netip.AddrPort from the given string.

func HErrBadHeight(CurVKHeight, RequesterHeight uint16, pkt_t PacketType) error
func HErrBadID(id uint64, pkt_t PacketType) error
    id is not 0 < id <= max(uint64)

func HErrBadServiceName(sn string, pkt_t PacketType) error
    service name may not be empty

func HErrBadStaleness(stale_s string, pkt_t PacketType) error
    Failed to parse a valid Go duration from the given string.

func HErrIDInUse(id childID, pkt_t PacketType) error
    The given child id is already in use by a different child.

func HErrMustHello(pkt_t PacketType) error
    The requester was not found in the pendingHello table and therefore did not
    first greet with a HELLO (or their HELLO was pruned).

func HErrMustJoin(pkt_t PacketType) error
    The requester was not found in the children table and therefore did not
    first JOIN (or their JOIN was pruned).


TYPES

type ChildrenSnapshot struct {
	// cID -> (service -> ip:addr)
	Leaves map[childID]map[serviceName]string `json:"leaves"`
	// cID -> [services]
	CVKs map[childID][]string `json:"child-VKs"`
	// service -> ["cID(ip:port)"]
	Services map[serviceName][]string `json:"services"`
}
    Used by Snapshot to take a point-in-time snapshot of the children and their
    services.

type Endpoint = string

const (
	EP_HELLO             Endpoint = "/hello"
	EP_STATUS            Endpoint = "/status"
	EP_JOIN              Endpoint = "/join"
	EP_REGISTER          Endpoint = "/register"
	EP_VK_HEARTBEAT      Endpoint = "/vk-heartbeat"
	EP_SERVICE_HEARTBEAT Endpoint = "/service-heartbeat"
	EP_LIST              Endpoint = "/list"
	EP_GET               Endpoint = "/get"
)
    the endpoints VK listens on for each packet type.

type GetReq struct {
	PktType PacketType `header:"Packet-Type"` // GET
	Body    struct {
		Service  string `json:"service" required:"true" example:"ssh" doc:"the name of the services to be fetched"`
		HopCount uint16 `json:"hop-count" required:"true" example:"2" doc:"the maximum number of VKs to hop to. A hop count of 0 or 1 means the request will stop at the first VK (the VK who receives the initial request)"`
	}
}
    Request for /get. The request issued by clients to find a provider of the
    requested service

type GetResponseResp struct {
	PktType PacketType `header:"Packet-Type"` // GET_RESPONSE
	Body    struct {
		Id   uint64 `json:"id" required:"true" example:"718926735" doc:"unique identifier of the VK responding to the get request. If the request propagated up the vault, the ID will be of the last VK."`
		Addr string `json:"addr" example:"1.1.1.1:80" doc:"the address of a provider of the service. Empty if none were found."`
	}
}
    Response for /get.

func Get(vkAddrStr string, hopCount uint16, service string) (*resty.Response, GetResponseResp, error)
    Spawns a new resty client and uses it to make a GET request against the
    target address for the named service.

    vkAddrStr should be of the form "http://<ip>:<port>"

type HelloReq struct {
	PktType PacketType `header:"Packet-Type"` // HELLO
	Body    struct {
		Id uint64 `json:"id" required:"true" example:"718926735" doc:"unique identifier for this specific node"`
	}
}
    Request for /hello. Used by nodes to introduce themselves to the tree.

type HelloResp struct {
	PktType PacketType `header:"Packet-Type"` // HELLO_ACK
	Body    struct {
		Id     uint64 `json:"id" required:"true" example:"123" doc:"unique identifier for the VK"`
		Height uint16 `json:"height" required:"true" example:"8" doc:"the height of the node answering the greeting"`
	}
}
    Response for /hello

type JoinAcceptResp struct {
	PktType PacketType `header:"Packet-Type"` // JOIN_ACCEPT
	Body    struct {
		Id     uint64 `json:"id" example:"123" doc:"unique identifier for the VK"`
		Height uint16 `json:"height" example:"8" doc:"the height of the requester's new parent"`
	}
}
    Response for /join

type JoinReq struct {
	PktType PacketType `header:"Packet-Type"` // JOIN
	Body    struct {
		Id     uint64 `json:"id" required:"true" example:"718926735" doc:"unique identifier for this specific node"`
		Height uint16 `json:"height,omitempty" dependentRequired:"is-vk" example:"3" doc:"height of the vk attempting to join the vault"`
		VKAddr string `json:"vk-addr,omitempty" dependentRequired:"is-vk" example:"174.1.3.4:8080" doc:"address of the listening VK service that can receive INCRs"`
		IsVK   bool   `json:"is-vk,omitempty" example:"false" doc:"is this node a VaultKeeper or a leaf? If true, height and VKAddr are required"`
	}
}
    Request for /join. Used by nodes to ask to join the vault after introducing
    themselves with HELLO.

type ListReq struct {
	PktType PacketType `header:"Packet-Type"` // LIST
	Body    struct {
		//Id       uint64 `json:"id" required:"true" example:"718926735" doc:"unique identifier of the child VK being refreshed"`
		HopCount uint16 `json:"hop-count" example:"2" doc:"the maximum number of VKs to hop to. A hop count of 0 or 1 means the request will stop at the first VK (the VK who receives the initial request)"`
	}
}
    Request for /list. The request issued by clients to learn about available
    services.

type ListResponseResp struct {
	PktType PacketType `header:"Packet-Type"` // LIST_RESPONSE
	Body    struct {
		Id       uint64   `json:"id" required:"true" example:"718926735" doc:"unique identifier of the VK responding to the list request. If the request propagated up the vault, the ID will be of the last VK."`
		Services []string `json:"services" required:"true" example:"[\"serviceA\"]" doc:"the name of the services known"`
	}
}
    Success response for /list.

func List(addrStr string, hopcount uint16) (*resty.Response, ListResponseResp, error)
    Spawns a new resty client and uses it to make a List request against the
    target address.

    addrStr should be of the form "http://<ip>:<port>"

type PacketType = string
    Representations of each packet type used by Orv along with their functions
    and related packets. As the prototype is implemented as an API, these packet
    types are somewhat secondary to the go structs. For consistency's sake,
    every request and response issued by the API includes the corresponding
    packet type as a http header.

const (
	// Sent by a node not part of the vault to introduce itself.
	// VKs respond to HELLOs with HELLO_ACK or not at all.
	// Requester nodes typically follow up with a JOIN or MERGE, but do not have to.
	//
	// All interactions must start with a HELLO.
	PT_HELLO PacketType = "HELLO"
	// Sent by VKs in response to a node's HELLO in order to relay basic information to the requester node.
	PT_HELLO_ACK PacketType = "HELLO_ACK"
)
    connection initialization

const (
	// Sent by a leaf to refresh the lifetimes of all services named in the HB.
	PT_SERVICE_HEARTBEAT       PacketType = "SERVICE_HEARTBEAT"
	PT_SERVICE_HEARTBEAT_ACK   PacketType = "SERVICE_HEARTBEAT_ACK"
	PT_SERVICE_HEARTBEAT_FAULT PacketType = "SERVICE_HEARTBEAT_FAULT"
	// Sent by a child VK to refresh the time until it is considered dead.
	PT_VK_HEARTBEAT       PacketType = "VK_HEARTBEAT"
	PT_VK_HEARTBEAT_ACK   PacketType = "VK_HEARTBEAT_ACK"
	PT_VK_HEARTBEAT_FAULT PacketType = "VK_HEARTBEAT_FAULT"
)
    heartbeats

const (
	// Sent by a node not part of the vault to request to join under the receiver VK.
	// Repeated or duplicate joins for a node already registered as a child of the VK are thrown away.
	PT_JOIN PacketType = "JOIN"
	// Sent by VKs in response to a node's JOIN request to accept the request.
	//
	// Once received by a node, that node can safely mark the VK as its parent.
	PT_JOIN_ACCEPT PacketType = "JOIN_ACCEPT"
	// Sent by VKs in response to a node's JOIN request to deny the request.
	//
	// Once received by a node, that node must resend a HELLO if it wishes to continue interacting with this VK.
	PT_JOIN_DENY PacketType = "JOIN_DENY"
)
    new node joining as leaf or VK

const (
	// Sent by a child node already part of a vault to tell its parent about a new service.
	// Initially proc'd by a new service at a leaf or VK, the REGISTER echoes up the tree until it has reached root.
	// Echoing responsibility falls to each parent VK to pass the message recursively.
	// If an existing service is registered to the same child node, the new information will supplant the existing information (ex: address and stale time).
	PT_REGISTER PacketType = "REGISTER"
	// Sent by a parent VK to confirm registration of the service offered by the child.
	PT_REGISTER_ACCEPT PacketType = "REGISTER_ACCEPT"
	PT_REGISTER_DENY   PacketType = "REGISTER_DENY"
)
    service registration

const (
	// Sent by a client to learn about the receiver VK. Does not echo up the vault.
	PT_STATUS          PacketType = "STATUS"
	PT_STATUS_RESPONSE PacketType = "STATUS_RESPONSE"
	// Sent by a client to learn what services are available.
	// Use hop count to enforce locality. A hop count of 1 means the request will only query the client immediate contact. Hop count is limited by vault height.
	// While a LIST with a hop count of 0 is technically an error, hop counts of 0 and 1 are treated the same.
	PT_LIST          PacketType = "LIST"
	PT_LIST_RESPONSE PacketType = "LIST_RESPONSE"
	// Sent by a client to fetch the address of a node providing the named service.
	// Use hop count to enforce locality. A hop count of 1 means the request will only query the client immediate contact. Hop count is limited by vault height.
	// While a GET with a hop count of 0 is technically an error, hop counts of 0 and 1 are treated the same.
	PT_GET          PacketType = "GET"
	PT_GET_RESPONSE PacketType = "GET_RESPONSE"
	// Sent by a VK to a client when the client's GET request is poorly formatted.
	// NOTE(_): not sent when GET does not find a service; that is still considered a good response.
	PT_GET_FAULT PacketType = "GET_FAULT"
)
    service requests

const (
	// Sent by a node to indicate that the VK should become one of its children.
	// Only used in root-root interactions.
	// Must follow a HELLO_ACK.
	//
	// Must be followed up by a MERGE_ACCEPT to confirm.
	PT_MERGE PacketType = "MERGE"
	// Sent by a VK to accept a node's request to merge.
	// Only used in root-root interactions.
	//
	// Once received by the requester node, that node can safely consider itself to be the new root.
	// The requester node must then update its height and send an INCREMENT to its pre-existing children.
	PT_MERGE_ACCEPT PacketType = "MERGE_ACCEPT"
	// Sent by a VK when it MERGEs with another VK in order to notify the pre-existing child VKs that their heights have increased by 1.
	// Children who receive an INCREMENT must echo it to their child VKs.
	// Do NOT send an INCREMENT down the new branch that was just attached because of the merge.
	PT_INCREMENT PacketType = "INCREMENT"
	// Optional response from a child VK who receives an ACK to confirm to their parent that their height has been updated.
	//
	// Should be used to validate that there are no gaps in the height (in other words, every child VK's height is exactly equal to its parent's height-1).
	PT_INCREMENT_ACK PacketType = "INCREMENT_ACK"
)
    root-root merging

type PruneTimes struct {
	// after receiving a HELLO, how long until the HELLO is forgotten?
	PendingHello time.Duration
	// after a child joins, how long do they have to register a service before getting pruned?
	ServicelessChild time.Duration
	// how long can a child CVK survive without sending a heartbeat?
	CVK time.Duration
}
    The amount of time before values in each table are prune-able.

type RegisterAcceptResp struct {
	PktType PacketType `header:"Packet-Type"` // REGISTER_ACCEPT
	Body    struct {
		Id      uint64 `json:"id" required:"true" example:"718926735" doc:"unique identifier for this specific node"`
		Service string `json:"service" required:"true" example:"SSH" doc:"the name of the service to be registered"`
	}
}
    Response for /register.

type RegisterReq struct {
	PktType PacketType `header:"Packet-Type"` // REGISTER
	Body    struct {
		Id      uint64 `json:"id" required:"true" example:"718926735" doc:"unique identifier for this specific node"`
		Service string `json:"service" required:"true" example:"SSH" doc:"the name of the service to be registered"`
		Address string `json:"address" required:"true" example:"172.1.1.54:22" doc:"the address the service is bound to. Only populated from leaf to parent."`
		Stale   string `json:"stale" example:"1m5s45ms" doc:"after how much time without a heartbeat is this service eligible for pruning"`
	}
}
    Request for /register. Used by nodes to tell their parent about a new
    service.

type ServiceHeartbeatAck struct {
	PktType PacketType `header:"Packet-Type"` // SERVICE_HEARTBEAT_ACK
	Body    struct {
		Id       uint64   `json:"id" required:"true" example:"718926735" doc:"unique identifier of the child VK being refreshed"`
		Services []string `json:"services" required:"true" example:"[\"serviceA\"]" doc:"the name of the services that were successfully refreshed"`
	}
}
    Response for /service-heartbeat.

type ServiceHeartbeatReq struct {
	PktType PacketType `header:"Packet-Type"` // SERVICE_HEARTBEAT
	Body    struct {
		Id       uint64   `json:"id" required:"true" example:"718926735" doc:"unique identifier of the child VK being refreshed"`
		Services []string `json:"services" required:"true" example:"[\"serviceA\", \"serviceB\"]" doc:"the name of the services to refresh"`
	}
}
    Request for /service-heartbeat. Used by leaves to refresh their services so
    they don't get pruned.

type StatusReq struct {
	PktType PacketType `header:"Packet-Type"` // STATUS
}
    Request for /status. Used by clients and tests to fetch information about
    the current state of a vk.

type StatusResp struct {
	PktType PacketType `header:"Packet-Type"` // STATUS_RESPONSE
	Body    struct {
		Id            childID          `json:"id" required:"true" example:"123" doc:"unique identifier for the VK"`
		Height        uint16           `json:"height" example:"8" doc:"the height of the queried VK"`
		Children      ChildrenSnapshot `json:"children" example:"" doc:"the children of this VK and their services. Represents a point-in-time snapshot. No representations are guaranteed and format is left up to the discretion of the VK implementation"`
		ParentID      uint64           `json:"parent-id" example:"789" doc:"unique identifier for the VK's parent. 0 if VK is root."`
		ParentAddress string           `json:"parent-address" example:"111.111.111.111:8080" doc:"address and port of the VK parent's process"`
		PruneTimes    struct {
			PendingHello     string `json:"pending-hello"`
			ServicelessChild string `json:"serviceless-child"`
			CVK              string `json:"child-vault-keeper"`
		} `json:"prune-times" example:"" doc:"this VK's timings for considering associated data to be stale"`
	}
}
    Response for GET /status commands. Returns the status of the current node.
    All fields (other than Id) are optional and may be omitted at the VK's
    discretion.

func Status(addrStr string) (*resty.Response, StatusResp, error)
    Spawns a new resty client and uses it to make a status request against
    the target address. Serves as an example of how to make client-side calls
    against a Vault.

    addrStr should be of the form "http://<ip>:<port>"

type VKHeartbeatAck struct {
	PktType PacketType `header:"Packet-Type"` // VK_HEARTBEAT_ACK
	Body    struct {
		Id uint64 `json:"id" required:"true" example:"718926735" doc:"unique identifier of the child VK being refreshed"`
	}
}
    Response for /vk-heartbeat.

type VKHeartbeatReq struct {
	PktType PacketType `header:"Packet-Type"` // VK_HEARTBEAT
	Body    struct {
		Id uint64 `json:"id" required:"true" example:"718926735" doc:"unique identifier of the child VK being refreshed"`
	}
}
    Request for /vk-heartbeat. Used by cVKs to alert their parent that they are
    still alive.

type VKOption func(*VaultKeeper)
    Function to set various options on the vault keeper. Uses defaults if an
    option is not set.

func Height(h uint16) VKOption
    Set the starting height of the VK (giving it a "hoard").

func SetHumaAPI(api huma.API) VKOption
    Override the default huma API instance. NOTE(_): This option is applied
    before routes are built, meaning routes will be built onto it, potentially
    destructively.

func SetLogger(l *zerolog.Logger) VKOption
    Override the default, verbose logger. To disable logging, pass a disabled
    zerolog logger.

func SetPruneTimes(pt PruneTimes) VKOption
    Set the prune times of VaultKeeper to the values stored in pt

type VaultKeeper struct {
	alive atomic.Bool     // has this VK been terminated?
	log   *zerolog.Logger // output logger
	id    uint64          // unique identifier
	addr  netip.AddrPort
	// services
	children *children

	endpoint struct {
		api  huma.API
		mux  *http.ServeMux
		http http.Server
	}

	restClient *resty.Client // client for hitting the endpoints of other VKs

	structureRWMu sync.RWMutex // locker for height+parent
	height        uint16       // current height of this vk
	parent        struct {
		id   uint64 // 0 if we are root
		addr netip.AddrPort
	}
	parentHeartbeatFrequency time.Duration // how often do we heartbeat our parent?
	pt                       PruneTimes
	helperDoneCh             chan bool // used to notify the pruner and heartbeater goros that it is time to shut down

	pendingHellos sync.Map // id -> timestamp
}
    A single instance of a Vault Keeper. Able to provide services, route &
    answer requests, and facilitate vault growth. Should be constructed via
    NewVaultKeeper().

func NewVaultKeeper(id uint64, addr netip.AddrPort, opts ...VKOption) (*VaultKeeper, error)
    Spawns and returns a new vault keeper instance.

    Optionally takes additional options to modify the state of the VaultKeeper.
    Conflicting options prefer options latter.

func (vk *VaultKeeper) AddrPort() netip.AddrPort
    Return's addr of the VK.

func (vk *VaultKeeper) ChildrenSnapshot() ChildrenSnapshot
    Returns the name of each service offered and by whom.

func (vk *VaultKeeper) Dead() bool
    Has this VK been terminated?

func (vk *VaultKeeper) Height() uint16
    Return's height of the VK.

func (vk *VaultKeeper) Hello(addrStr string) (resp *resty.Response, err error)
    Causes the VaultKeeper to send a HELLO to the given address

func (vk *VaultKeeper) ID() childID
    Return's ID of the VK.

func (vk *VaultKeeper) Join(addrStr string) (err error)
    Causes the VaultKeeper to attempt to join the VK at the given address. If it
    succeeds, the VK will alters its current parent to point to the new parent.
    Expects that the caller already sent HELLO.

func (vk *VaultKeeper) LogDump(e *zerolog.Event)
    Pretty prints the state of the vk into the given zerolog event. Used for
    debugging purposes.

func (vk *VaultKeeper) Parent() struct {
	Id   uint64
	Addr netip.AddrPort
}
    Returns the parent of the VK. 0 and netip.AddrPort{} if root.

func (vk *VaultKeeper) Start() error
    Starts the http api listener in the vk. Includes a small start up delay to
    ensure the server is ready by the time this function returns. WARNING(_):
    This function is not safe to call multiple times. It should be integrated
    with a .Stop() function to make this call safer.

func (vk *VaultKeeper) Terminate()
    Terminates the vaultkeeper, cleaning up all resources and closing the API
    server.

func (vk *VaultKeeper) buildEndpoints()
    Generates endpoint handling on the given api instance. Directly alters a
    shared pointer within the parameter (hence no return value and no pointer
    parameter (yes, I know it is weird. Weird design decision on huma's part)).

func (vk *VaultKeeper) handleGet(_ context.Context, req *GetReq) (*GetResponseResp, error)
    Handle refreshing services offered by leaves.

func (vk *VaultKeeper) handleHello(ctx context.Context, req *HelloReq) (*HelloResp, error)
    Handle requests against the HELLO endpoint.

func (vk *VaultKeeper) handleJoin(ctx context.Context, req *JoinReq) (*JoinAcceptResp, error)
    Handle requests against the JOIN endpoint

func (vk *VaultKeeper) handleList(_ context.Context, req *ListReq) (*ListResponseResp, error)
    Handle the LIST client request. Returns the list of all known services,
    as given by the highest-reachable VK (per hop count or root height).

func (vk *VaultKeeper) handleRegister(_ context.Context, req *RegisterReq) (*RegisterAcceptResp, error)
    Handle requests against the REGISTER endpoint

func (vk *VaultKeeper) handleServiceHeartbeat(_ context.Context, req *ServiceHeartbeatReq) (*ServiceHeartbeatAck, error)
    Handle refreshing services offered by leaves.

func (vk *VaultKeeper) handleStatus(ctx context.Context, req *StatusReq) (*StatusResp, error)
    Handle requests against the status endpoint. Returns a bunch of information
    about the queried VK.

func (vk *VaultKeeper) handleVKHeartbeat(_ context.Context, req *VKHeartbeatReq) (*VKHeartbeatAck, error)
    Handle refreshing child VKs so they are not considered dead.

func (vk *VaultKeeper) isRoot() bool
    Returns whether or not we believe we are the root of the vault. Caller is
    expected to hold the structureLock, lest we create a data race.

func (vk *VaultKeeper) startHeartbeater()
    Infinite call to continually send heartbeats to the parent, if one is set on
    the vk.

    Intended to be run in a new goroutine.

    Dies only when vk.helperDoneCh is closed.

type childID = uint64 // id of a child (may be a leaf or a cVK)
    type aliases for readability

type childVK struct {
	// the timer currently tracking how much time remains until this cVK is considered dead.
	// refreshed by a VK_HEARTBEAT.
	// uses children.cvkPruneTime.
	// If the timer is allowed to fire, it will prune this child and all services it provides
	pruneTimer *time.Timer
	services   map[serviceName]netip.AddrPort // service -> downstream leaf's given ip:port for this service
	addr       netip.AddrPort                 // how do we reach this child? Only used for INCRs
}
    A child VaultKeeper and the services that are available on its branch.

type children struct {
	log      zerolog.Logger // child logger of vk.log
	smpl     zerolog.Logger // sampled version of children.log
	mu       sync.Mutex
	services map[serviceName][]struct {
		cID  childID
		addr netip.AddrPort
	} // service name -> list of each provider of the service and the child that told us about it
	servicelessLeafPruneTime time.Duration // how long should a leaf be allowed to exist without a service
	cvkPruneTime             time.Duration // how long should a cVK be allowed to exist without a heartbeat
	leaves                   map[childID]map[serviceName]leafService
	vks                      map[childID]childVK
}
    tracks the state of all children of the VK, using multiple hashtables for
    rapid access. mu must be held for all operations on children.

func newChildren(parentLogger *zerolog.Logger, leafPruneTime, cvkPruneTime time.Duration) *children
    Returns a ready-to-use children struct with the top level maps initialized.
    leafPruneTime is how much time a new leaf has from the moment it is added to
    the map until it is pruned (if it does not add a service).

func (c *children) GetRandomProvider(sn serviceName) (addr string, found bool)
    Given a service name, fetches a random provider of that service.

func (c *children) HeartbeatCVK(cID childID) error
    Refreshes the prune timer of the cVKL associated to the given cID.

func (c *children) HeartbeatLeafService(cID childID, svcNames []serviceName) (refreshedServices []serviceName, herr error)
    Refreshes the prune timer of the cVKL associated to the given cID. If an
    error is returned, it will a huma error (thus including the response status
    code).

func (c *children) Services() []string
    Returns the name of every service currently offered.

func (c *children) Snapshot() ChildrenSnapshot
    Returns a JSON-encodable struct of the child nodes and their services.
    It is a point-in-time snapshot and requires locking the children struct.

func (c *children) addLeaf(cID childID) (wasVK, wasLeaf bool)
    Adds a new leaf if the leaf does not already exist (as a leaf or VK).
    Returns what the cID already existed as. Both returns will be false if a new
    leaf was actually added. It should not be possible for both to return true;
    if they do, something has gone horribly wrong prior to this call.

    NOTE(rlandau): When the leaf is added, a timer is started that attempts to
    prune the leaf (if it has no services) when it fires. This is a one-shot
    timer; you must manually test for a lack of remaining services whenever a
    service is deregistered from a leaf.

func (c *children) addService(cID childID, svcName serviceName, addr netip.AddrPort, staleTimeStr string) error
    Adds a new service under the given child. staleTime is only used if cID
    resolves to a leaf. If this service already exists under a leaf, the service
    will take on the new staleTime iff it is valid. Does not echo the REGISTER
    up the tree; expects the caller to do so. Assumes all parameters (other than
    staleTime) have already been validated.

func (c *children) addServiceToLeaf(cID childID, svc serviceName, ap netip.AddrPort, staleTimeStr string) (newService bool, err error)
    Helper function for addService() once it figures out that the new service
    should belong to a leaf. Adds the service under the leaf. Does not associate
    this VK as a provider of the service. Assumes cID, svc, and ap have already
    been validated. staleTime must resolve to a valid time.Duration iff this is
    a new service. Assumes the caller already owns the child lock. Returns true
    if it is a new service.

func (c *children) addServiceToVK(cID childID, svc serviceName, ap netip.AddrPort) (newService bool, err error)
    Helper function for addService() once it figures out that the new service
    should belong to a cVK. Adds the service under the cVK if we do not already
    know about it. Does not associate this VK as a provider of the service.
    Also refreshes the heartbeat timer for this cVK. Assumes cID, svc, and ap
    have already been validated. ap should be the address of the leaf that
    offers this service, which should have been passed up by downstream VKs.
    Assumes the caller already owns the child lock. Returns true if it is a new
    service.

func (c *children) addVK(cID childID, addr netip.AddrPort) (wasVK, wasLeaf bool)
    Adds a new child VK if the cID does not already exist (as a leaf or VK).
    Expects addr to be the port that the VK service is bound to on the child
    so we can send them INCRs. Returns what the cID already existed as.
    Both returns will be false if a new cVK was actually added. It should not be
    possible for both to return true; if they do, something has gone horribly
    wrong prior to this call.

type leafService struct {
	// the timer currently tracking how much time remains until the service is pruned (unless a heartbeat refreshes it).
	// Refreshed by a SERVICE_HEARTBEAT.
	// uses leafService.staleTime.
	// If the timer is allowed to fire, it will prune this service
	pruneTimer *time.Timer
	staleTime  time.Duration  // how long w/o a heartbeat until this service is considered stale
	addr       netip.AddrPort // what address to give to requesters for how to access this service
}
    A service provided by a directly descendent of the VK, a leaf node.

type serviceName = string
    type aliases for readability

